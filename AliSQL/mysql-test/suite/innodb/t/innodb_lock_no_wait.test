# test for lock table .. wait/nowait , select .. for update wait/no_wait

# Save the initial number of concurrent sessions.
--source include/count_sessions.inc
--source include/have_innodb.inc

--disable_warnings
DROP TABLE IF EXISTS test.t1;
CREATE TABLE test.t1 (c1 INT, c2 INT);
INSERT INTO test.t1 (c1,c2) values (1,1),(2,2),(3,3),(4,4);
--enable_warnings

--echo # Connection con1
connect(con1,localhost,root,,);
LOCK TABLE test.t1 WRITE;

--echo # Connection con2
connect(con2,localhost,root,,);
# The following statement should hang because con1 is locking the table
--error ER_LOCK_WAIT_TIMEOUT
SELECT * FROM test.t1 WHERE c1=4 FOR UPDATE NO_WAIT;
--error ER_LOCK_WAIT_TIMEOUT
SELECT * FROM test.t1 WHERE c1=4 FOR UPDATE WAIT 1;
# wait time rang from 0 to 365*24*3600=31536000
--error ER_WRONG_VALUE_FOR_VAR
SELECT * FROM test.t1 WHERE c1=4 FOR UPDATE WAIT 31536001;

--echo # Connection con1
connection con1;
INSERT INTO test.t1 VALUES(5,5);
UNLOCK TABLES;
set AUTOCOMMIT=0;
--disable_result_log
SELECT * FROM test.t1 WHERE c1=4 FOR UPDATE;
--enable_result_log

--echo # Connection con2
connection con2;
set AUTOCOMMIT=0;
SET INNODB_LOCK_WAIT_TIMEOUT=1;
--error ER_LOCK_WAIT_TIMEOUT
SELECT * FROM test.t1 WHERE c1=4 FOR UPDATE;
--error ER_LOCK_WAIT_TIMEOUT
SELECT * FROM test.t1 WHERE c1=4 FOR UPDATE NO_WAIT;
--error ER_LOCK_WAIT_TIMEOUT
SELECT * FROM test.t1 WHERE c1=4 FOR UPDATE WAIT 1;

--echo # Connection con1
connection con1;
UPDATE test.t1 SET c2=5 WHERE c1=4;
COMMIT;
set AUTOCOMMIT=0;
SELECT * FROM test.t1 WHERE c1=4 FOR UPDATE;

--echo # Connection con2
connection con2;
set AUTOCOMMIT=0;
SET INNODB_LOCK_WAIT_TIMEOUT=1;
--send
--disable_result_log
SELECT * FROM test.t1 WHERE c1=4 FOR UPDATE WAIT 10;

--echo # Connection con1
connection con1;
COMMIT;

--echo # Connection con2
connection con2;
--reap


disconnect con1;
disconnect con2;

# clear
connection default;
DROP TABLE test.t1;

--source include/wait_until_count_sessions.inc
