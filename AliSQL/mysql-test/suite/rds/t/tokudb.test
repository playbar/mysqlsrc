--source include/have_tokudb.inc
--source include/have_innodb.inc
--source include/have_partition.inc

#Test CREATE table with CLUSTERING index
CREATE TABLE t1 (c1 INT) ENGINE = TOKUDB CHARSET=UTF8;
CREATE TABLE t2 (c1 INT, c2 INT, CLUSTERING KEY (c1)) ENGINE=TOKUDB;
CREATE TABLE t3 (c1 INT, c2 INT, PRIMARY KEY(c1), CLUSTERING KEY(c2)) ENGINE=TOKUDB;
CREATE TABLE t4 (c1 INT, c2 INT, UNIQUE CLUSTERING KEY(c2)) ENGINE=TOKUDB;
CREATE TABLE t5 (c1 INT PRIMARY KEY, c2 INT CLUSTERING KEY, c3 INT UNIQUE) ENGINE=TOKUDB;

#Test Create table with different row_format
CREATE TABLE t6 (c1 INT, c2 INT) ENGINE = TOKUDB ROW_FORMAT=COMPRESSED;
CREATE TABLE t7 (c1 INT, c2 INT) ENGINE = TOKUDB ROW_FORMAT=TOKUDB_UNCOMPRESSED;
CREATE TABLE t8 (c1 INT, c2 INT) ENGINE = TOKUDB ROW_FORMAT=TOKUDB_ZLIB;
CREATE TABLE t9 (c1 INT, c2 INT) ENGINE = TOKUDB ROW_FORMAT=TOKUDB_QUICKLZ;
CREATE TABLE t10 (c1 INT, c2 INT) ENGINE = TOKUDB ROW_FORMAT=TOKUDB_LZMA;
CREATE TABLE t11 (c1 INT, c2 INT) ENGINE = TOKUDB ROW_FORMAT=TOKUDB_FAST;
CREATE TABLE t12 (c1 INT, c2 INT) ENGINE = TOKUDB ROW_FORMAT=TOKUDB_SMALL;

#Cover changes in sql_show.cc
SHOW CREATE TABLE t12;
SELECT TABLE_NAME,ROW_FORMAT FROM INFORMATION_SCHEMA.TABLES WHERE table_schema LIKE 'test' AND table_name LIKE 't%';

#Test ALTER Operation for tokudb
ALTER TABLE t1 ADD COLUMN c2 INT;
ALTER TABLE t1 ADD COLUMN c3 INT;
ALTER TABLE t1 ADD COLUMN c4 INT;
ALTER TABLE t1 ADD PRIMARY KEY(c1);
ALTER TABLE t1 ADD CLUSTERING KEY(c2,c3);
ALTER TABLE t1 ADD CLUSTERING KEY(c4);
ALTER TABLE t1 DROP KEY c4;
ALTER TABLE t1 DROP COLUMN c4;
ALTER TABLE t1 ADD COLUMN c4 VARCHAR(8192);
ALTER TABLE t1 ADD COLUMN c5 BLOB;
--error ER_TOO_LONG_KEY
ALTER TABLE t1 ADD KEY(c4,c5(3073));
--error ER_TOO_LONG_KEY
ALTER TABLE t1 ADD KEY(c4(1024),c5(2048));
SHOW CREATE TABLE t1;

# Innodb doesn't support clustering key
CREATE TABLE t13 (c1 INT, c2 INT) ENGINE=INNODB;
--error ER_ILLEGAL_HA_CREATE_OPTION
CREATE TABLE t14 (c1 INT, c2 INT, CLUSTERING KEY(c1)) ENGINE=INNODB;
--error ER_ILLEGAL_HA_CREATE_OPTION
CREATE TABLE t14 (c1 INT, c2 INT, UNIQUE CLUSTERING KEY(c1)) ENGINE=INNODB;
--error ER_ILLEGAL_HA_CREATE_OPTION
ALTER TABLE t13 ADD CLUSTERING KEY(c1);

#Test foreigin Key
#Tokudb doesn't support foreign key
CREATE TABLE t14 (c1 INT PRIMARY KEY) ENGINE=TOKUDB;
CREATE TABLE t15 (c1 INT NOT NULL DEFAULT '0', UNIQUE KEY(c1), CONSTRAINT t1_c1_fk FOREIGN KEY (c1) references t1(c1)) ENGINE=TOKUDB;
ALTER TABLE t15 ADD CONSTRAINT t1_c1_fk FOREIGN KEY (c1) REFERENCES t1(c1);

#Cover make_join_readinfo
DROP TABLE t1;
CREATE TABLE t1(c1 INT, c2 INT, c3 INT, CLUSTERING KEY(c1,c2)) ENGINE=TOKUDB;
INSERT INTO t1 VALUES (1,2,3),(2,3,4),(4,5,6),(6,7,8),(7,8,9),(9,10,11);
SELECT * FROM t1 WHERE c1 IN (SELECT c2 FROM t1);
DROP TABLE t1;

# Cover Optimize_table_order::best_access_path()
CREATE TABLE t1 (c1 INT , c2 INT, c3 INT, CLUSTERING KEY(c1,c2), CLUSTERING KEY(c1))ENGINE=TOKUDB;
INSERT INTO t1 VALUES (1,2,3),(2,3,4),(3,4,5),(5,6,7);
SELECT * FROM t1 WHERE c1 = 2;
DROP TABLE t1;

#Cover test_if_skip_sort_order
DROP TABLE t2;
CREATE TABLE t1 (c1 INT, c2 INT)ENGINE=TOKUDB;
CREATE TABLE t2 (c1 INT, c2 INT,c3 INT, CLUSTERING KEY(c1))ENGINE=TOKUDB;
INSERT INTO t1 VALUES (1,2),(2,3),(3,4),(4,5),(5,6),(6,7);
INSERT INTO t2 VALUES (1,2,3),(2,3,4),(3,4,5),(4,5,6);
SELECT * FROM t2 WHERE t2.c3 IN (SELECT c1 FROM t2) ORDER BY c1 LIMIT 10000;
DROP TABLE t1;

#Cover find_shortest_key
CREATE TABLE t1 (c1 INT, c2 VARCHAR(64),INDEX(c2,c1),PRIMARY KEY (c1));
INSERT INTO t1 VALUES (1,'ABC'),(2,'BCD'),(3,'CDE'),(4,'DEF'),(5,'EFG'),(6,'FGH'),(7,'GHI');
SELECT COUNT(*) FROM t1;

#Drop all tables created above
DROP TABLE t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15;

#Test usage of clustering index;
CREATE TABLE t1 (c1 INT AUTO_INCREMENT PRIMARY KEY, c2 INT, c3 INT, CLUSTERING
KEY(c2), key(c3)) ENGINE=TOKUDB;
INSERT INTO t1(c2,c3) VALUES
(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10);
SELECT * FROM t1 WHERE c1 = 2;
SELECT * FROM t1 WHERE c2 = 7 ORDER BY c2;
SELECT * FROM t1 WHERE c3 = 9 ORDER BY c1;
SELECT * FROM t1 WHERE c2 between 3 and 9 ORDER BY c2;
UPDATE t1 SET c3 =c3+1 WHERE c2=6;
UPDATE t1 SET c2=c2+1 WHERE c2=6;

#Test range query
SELECT * FROM t1 WHERE c1>2 and c1 < 10 ORDER BY c1;
UPDATE t1 SET c3=c3+1 ORDER BY c1 limit 5;
UPDATE t1 SET c3=c3+1 ORDER BY c2 limit 5;
DROP TABLE t1;
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT);
INSERT INTO t1 VALUES(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10),(10,11),(11,12);
SELECT * FROM t1;
# Cover join_read_first -> prepare_index_scan
SELECT * FROM t1 ORDER BY c1;
# Cover join_read_last -> prepare_index_scan
SELECT * FROM t1 ORDER BY c1 DESC;
# Cover multi_range_read_next -> read_range_first
SELECT * FROM t1 WHERE c1 >6;
# Cover multi_range_read_next -> read_range_first
SELECT * FROM t1 WHERE c1 >6 ORDER BY c1;
# Cover QUICK_SELECT_DESC::get_next -> prepare_range_scan
SELECT * FROM t1 WHERE c1 >6 ORDER BY c1 DESC;
# Cover QUICK_RANGE_SELECT::get_next -> multi_range_read_next -> read_range_first
SELECT * FROM t1 WHERE c1 <6;
# Cover QUICK_RANGE_SELECT::get_next -> multi_range_read_next -> read_range_first
SELECT * FROM t1 WHERE c1 <6 ORDER BY c1;
# Cover QUICK_SELECT_DESC::get_next -> prepare_range_scan
SELECT * FROM t1 WHERE c1 <6 ORDER BY c1 DESC;
# Cover rr_index_first -> prepare_index_scan
UPDATE t1 SET c2=c2+1 ORDER BY c1 LIMIT 2;
# Cover rr_index_last -> prepare_index_scan
UPDATE t1 SET c2=c2+1 ORDER BY c1 DESC LIMIT 2;

DROP TABLE t1;

#Test XA between different engines.
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT, c3 VARCHAR(28)) ENGINE = TOKUDB;
CREATE TABLE t2 (c1 INT PRIMARY KEY, c2 INT, c3 VARCHAR(128)) ENGINE = INNODB;
CREATE TABLE t3  (c1 INT, c2 INT, c3 INT, KEY(c1)) ENGINE=TOKUDB
PARTITION BY RANGE(c1)
(partition p1 values less than(10),partition p2 values less than(20),partition p3 values less than maxvalue);

# Update tokudb, innodb
BEGIN;
INSERT INTO t1 VALUES (1,2,3);
INSERT INTO t2 VALUES (1,2,3);
commit;

#Update innodb, tokudb
BEGIN;
UPDATE t2 SET c3=c3+1 WHERE c1 = 1;
UPDATE t1 SET c3=c3+1 WHERE c1 = 2;
COMMIT;

#Update inndob, tokudb and rollback the transaction
BEGIN;
UPDATE t2 SET c3=c3+1 WHERE c1 = 1;
UPDATE t1 SET c3=c3+1 WHERE c1 = 2;
ROLLBACK;

#Check the record.
SELECT * FROM t1 ORDER BY c1;
SELECT * FROM t2 ORDER BY c2;

BEGIN;
DELETE FROM t1;
DELETE FROM t2;
COMMIT;

# Test operation on Partition table using tokudb engine.
BEGIN;
INSERT INTO t3 VALUES (1,2,3),(3,4,5),(8,9,10),(12,13,56),(17,7,7),(44,43,22),(56,65,3);
COMMIT;
SELECT * FROM t3 ORDER BY c1 LIMIT 5;
SELECT * FROM t3 where c2 =2;
SELECT * FROM t3 where c1 > 17;
SELECT MAX(c2) FROM t3;
UPDATE t3 SET c2=c2+1;
DELETE FROM t3;

DROP TABLE t3;
CREATE TABLE t3 (c1 INT PRIMARY KEY, c2 INT) ENGINE=TOKUDB;
INSERT INTO t3 VALUES (1,1),(2,2),(3,3);
# Cover index_last
SELECT MAX(c1) FROM t3;

#Cover code changes to realize SHOW ENGINE TOKUDB STATUS
--let $innodb_status =`show engine tokudb status`
--sleep 2
--let $innodb_status =`show engine tokudb status`
--replace_column 2 ####
show status like '%tokudb_rows%';
show variables like 'tokudb_cpu_nums';

#Restart the server to cover TC_LOG_MMAP recover logic
--disable_reconnect
--send_shutdown
--source include/wait_until_disconnected.inc
--echo # Restart server.
--exec echo "restart: " > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--enable_reconnect
--source include/wait_until_connected_again.inc

#Cleanup
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
