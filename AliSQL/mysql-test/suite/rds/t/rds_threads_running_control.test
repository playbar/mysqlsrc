source include/have_debug.inc;
# testcase for thread running control feature.

--disable_warnings
drop table if exists t;
--enable_warnings

create table t(id int auto_increment primary key, a int)engine=innodb;
insert into t(a) values(1),(2),(3),(4);

grant select,insert,update,delete on test.* to tr_test@localhost;
flush privileges;

set @lock_wait_timeout=@@global.innodb_lock_wait_timeout;
set global innodb_lock_wait_timeout=1;

set @tr_high_watermark=@@global.rds_threads_running_high_watermark;
set @tr_ctl_mode=@@global.rds_threads_running_ctl_mode;

show global variables like 'rds_threads_running_ctl_mode';

# set rds_threads_running_high_watermark=0 the same as rds_threads_running_high_watermark=max_connections
set global rds_threads_running_high_watermark=0;
show global variables like 'rds_threads_running_high_watermark';
show global variables like 'max_connections';

connect (con1,localhost,tr_test,,test);
connect (con2,localhost,tr_test,,test);
connect (con3,localhost,tr_test,,test);
connect (con4,localhost,tr_test,,test);
connect (con5,localhost,tr_test,,test);
connect (con6,localhost,tr_test,,test);
connect (con7,localhost,tr_test,,test);
connect (con8,localhost,tr_test,,test);
connect (con9,localhost,tr_test,,test);
connect (con10,localhost,tr_test,,test);
connect (con11,localhost,tr_test,,test);

# start a transaction
connection con10;
begin;
select * from t;

#start an empty transaction
connection con11;
begin;

connection con1;
let $ID1= `SELECT @id := CONNECTION_ID()`;
--send select sleep(100)
connection con2;
let $ID2= `SELECT @id := CONNECTION_ID()`;
--send select sleep(100)
connection con3;
let $ID3= `SELECT @id := CONNECTION_ID()`;
--send select sleep(100)
connection con4;
let $ID4= `SELECT @id := CONNECTION_ID()`;
--send select sleep(100)
connection con5;
let $ID5= `SELECT @id := CONNECTION_ID()`;
--send select sleep(100)
connection con6;
let $ID6= `SELECT @id := CONNECTION_ID()`;
--send select sleep(100)
connection con7;
let $ID7= `SELECT @id := CONNECTION_ID()`;
--send select sleep(100)
connection con8;
let $ID8= `SELECT @id := CONNECTION_ID()`;
--send select sleep(100)

# make sure the above sessions have started sleeping
connection default;
let $wait_condition= select count(*)=8 from information_schema.processlist
  where INFO='select sleep(100)';
--source include/wait_condition.inc

###########################################################

connection default;
show status like 'Threads_rejected';

set global rds_threads_running_ctl_mode=DEFAULT;
set global rds_threads_running_high_watermark=8;
show global variables like 'rds_threads_running_high_watermark';
show global variables like 'rds_threads_running_ctl_mode';

connection con9;
--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
select * from t;
insert into t values(5,5);
update t set a=10 where id=5;
delete from t where id=5;

# commit/rollback statement will not be blocked.
commit;
rollback;

connection default;
show status like 'Threads_rejected';

select * from t;

--echo #For SELECT...FROM UPDATE...(rds_threads_running_ctl_mode=DEFAULT)
connection con9;
--sleep 1
show status like 'Threads_running';

--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
select * from t;

# should not be affected as it's actually an UPDATE statement.
#select id, a from update t set a=a+1 where id=1;
update t set a=a+1 where id=1;

#set autocommit=0;
## will be successed and commit.
#select id, a from update commit_on_success rollback_on_fail t set a=a-1 where id=1;
#connection default;
#select * from t;
#connection con9;
#commit;
#
#connection default;
#begin;
## set row locks
#select * from t for update;
#
#connection con9;
## will be failed due to lock wait timeout and rollback.
#--error ER_LOCK_WAIT_TIMEOUT
#select id, a from update commit_on_success rollback_on_fail t set a=a-1 where id=1;
#connection default;
#select * from t;
#connection con9;
#rollback;

connection default;
show status like 'Threads_rejected';
commit;

# started transaction will not be blocked.
connection con10;
insert into t values (5,5);
update t set a=10 where id=5;
delete from t where id=5;

# started empty transaction will be blocked.
connection con11;
--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
select * from t;

connection default;
show status like 'Threads_rejected';

###########################################################

set global rds_threads_running_ctl_mode=ALL;
show global variables like 'rds_threads_running_ctl_mode';

connection con9;
--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
select * from t;
--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
insert into t values(7,7);
--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
update t set a=14 where id=7;
--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
delete from t where id=7;

# commit/rollback statement will not be blocked.
commit;
rollback;

connection default;
show status like 'Threads_rejected';

--echo #For SELECT...FROM UPDATE...(rds_threads_running_ctl_mode=ALL)
connection con9;
--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
#select id, a from update t set a=a+1 where id=1;
update t set a=a+1 where id=1;

#--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
#select id, a from update commit_on_success rollback_on_fail t set a=a-1 where id=1;
#connection default;
#select * from t;
#connection con9;
## commit will not be affected
#commit;
#
#connection con9;
## will be failed due to lock wait timeout and rollback.
#--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
#select id, a from update commit_on_success rollback_on_fail t set a=a-1 where id=1;
#connection default;
#select * from t;
#connection con9;
## rollback will not be affected
#rollback;

connection default;
show status like 'Threads_rejected';

# started transaction will not be blocked.
connection con10;
select * from t;
insert into t values (9,9);
update t set a=18 where id=9;
delete from t where id=9;
commit;

# started empty transaction will be blocked.
connection con11;
--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
select * from t;
--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
insert into t values (10,10);
--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
update t set a=20 where id=10;
--error ER_RDS_SERVER_THREAD_RUNNING_TOO_HIGH
delete from t where id=10;
commit;

connection default;
show status like 'Threads_rejected';

# quit sleep connections
--replace_result $ID1 ID
eval kill query $ID1;
--replace_result $ID2 ID
eval kill query $ID2;
--replace_result $ID3 ID
eval kill query $ID3;
--replace_result $ID4 ID
eval kill query $ID4;
--replace_result $ID5 ID
eval kill query $ID5;
--replace_result $ID6 ID
eval kill query $ID6;
--replace_result $ID7 ID
eval kill query $ID7;

# test for doublecheck fail
set global rds_threads_running_high_watermark=1;
set global debug= "+d,thread_running_change_before_doublecheck";

connection con9;
--send select * from t;

connection default;
--sleep 1
--replace_result $ID8 ID
eval kill query $ID8;

connection con9;
--reap

connection default;
set global rds_threads_running_high_watermark=8;
set global debug= default;


# test for shield variables function
connection con1;
--reap
show global variables like 'rds_threads_running_%';
connection default;
connection con1;
show global variables like 'rds_threads_running_%';

connection con2;
--reap
connection con3;
--reap
connection con4;
--reap
connection con5;
--reap
connection con6;
--reap
connection con7;
--reap
connection con8;
--reap

connection default;

disconnect con1;
disconnect con2;
disconnect con3;
disconnect con4;
disconnect con5;
disconnect con6;
disconnect con7;
disconnect con8;
disconnect con9;
disconnect con10;
disconnect con11;

set global rds_threads_running_high_watermark=@tr_high_watermark;
set global rds_threads_running_ctl_mode=@tr_ctl_mode;
set global innodb_lock_wait_timeout=@lock_wait_timeout;

drop user tr_test@localhost;
drop table t;
